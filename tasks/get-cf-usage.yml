# This was auto-generated by: ./bin/generate get-cf-usage
---
platform: linux

image_resource:
  type: docker-image
  source:
    repository:

params:

  CONFIG_PATH: # Optional - Use a yaml instead of configuring each cf param
  # Format:
  ##
  # configs:                # Equivalent variable:
  # - name:                 # REPORT_NAME
  #   endpoint:             # CF_ENDPOINT
  #   username:             # CF_USERNAME
  #   password:             # CF_PASSWORD
  #   skip-ssl-validation:  # SKIP_SSL_VALIDATION
  ##

  # CF Login information
  REPORT_NAME: # Required - The path to the file to output the report to
  CF_ENDPOINT: # Required - The endpoint to log into
  CF_USERNAME: # Required - The username of the admin user or equivalent via
               #            cloud_controller.admin and uaa.admin scopes
  CF_PASSWORD: # Required - The password of the admin user or equivalent via
               #            cloud_controller.admin and uaa.admin scopes

  SKIP_SSL_VALIDATION: false # Optional - Skip ssl validation

  # Paths
  CF_RELATIVE_HOME: # Optional - If set, CF_HOME will be replaced with this
                    #            path expanded to be absolute

  PLUGIN_PATH: bcr-plugin-linux # Optional - The path to the bcr plugin,
                                #            relative to the plugin input.  # BCR Options
  MONTHLY: false # Optional - True sets the monthly flag is set with bcr command

inputs:
- name: config
  required: false
- name: plugin

outputs:
- name: report

# Generated
run:
  path: bash
  args:
  - -c
  - |
    set -eo pipefail
    get-cf-usage ()
    {
        local plugin_path=${PLUGIN_PATH:-bcr-plugin-linux};
        local config_path=${CONFIG_PATH:-config.json};
        if [[ -n "${CF_RELATIVE_HOME:-}" ]]; then
            export CF_HOME=$(cd "$CF_RELATIVE_HOME" && pwd);
        fi;
        local monthly_option='';
        if [[ ${MONTHLY:-false} == true ]]; then
            monthly_option=--monthly;
        fi;
        function yml_to_json ()
        {
            ruby -ryaml -rjson -e "i = YAML::load(STDIN.read); puts i.to_json"
        };
        function _get-cf-usage ()
        {
            local name=$1;
            local endpoint=$2;
            local skip_ssl_validation=$3;
            local username="$4";
            local password="$5";
            local ssl_options='';
            if [[ $skip_ssl_validation == true ]]; then
                ssl_options=--skip-ssl-validation;
            fi;
            echo "Setting cf api $endpoint";
            cf api $endpoint $ssl_options;
            echo "Logging in as $username";
            cf auth "$username" "$password";
            echo "Installing bcr-plugin: plugin/$plugin_path";
            cf install-plugin -f plugin/$plugin_path;
            echo "Grabbing report and placing in report/${name}.txt";
            cf bcr $monthly_option --ai --si > report/${name}.txt
        };
        if [[ -f config/$config_path ]]; then
            for row in $(cat config/$config_path | yml_to_json | jq -rc '.[] | @base64' );
            do
                function _jq ()
                {
                    echo "${row}" | base64 --decode | jq -r "$1"
                };
                _get-cf-usage $(_jq .name) $(_jq .endpoint) $(_jq '.["skip-ssl-validation"] // false') "$(_jq .username)" "$(_jq .password)";
            done;
        else
            _get-cf-usage $REPORT_NAME $CF_ENDPOINT ${SKIP_SSL_VALIDATION:-false} "$CF_USERNAME" "$CF_PASSWORD";
        fi
    }
    get-cf-usage
